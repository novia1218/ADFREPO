{
	"name": "df_CustomerStg",
	"properties": {
		"description": "project",
		"folder": {
			"name": "AZURE_PROJECT_DATAFLOW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "C_customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "C_customer_address",
						"type": "DatasetReference"
					},
					"name": "customerAddress"
				},
				{
					"dataset": {
						"referenceName": "C_customerEmail",
						"type": "DatasetReference"
					},
					"name": "customerEmail"
				},
				{
					"dataset": {
						"referenceName": "C_customerPhone",
						"type": "DatasetReference"
					},
					"name": "customerPhone"
				},
				{
					"dataset": {
						"referenceName": "C_hutlover",
						"type": "DatasetReference"
					},
					"name": "hutlover"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "C_customer_AzureSqlDb",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "window1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "window2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "filter5"
				},
				{
					"name": "window3"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter6"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          CUSTOMER_FIRST_NAME as string,",
				"          CUSTOMER_LAST_NAME as string,",
				"          CUSTOMER_DOB as date,",
				"          CUSTOMER_TYPE as string,",
				"          IS_LOYAL_MEMBER as string,",
				"          FIRST_PURCHASE_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"source(output(",
				"          CUSTOMER_ADDRESS_ID as integer,",
				"          ADDRESS_LINE1 as string,",
				"          ADDRESS_LINE2 as string,",
				"          CITY_NAME as string,",
				"          STATE_NAME as string,",
				"          COUNTRY_NAME as string,",
				"          ZIP_CODE as integer,",
				"          GATE_CODE as integer,",
				"          ADDRESS_TYPE as string,",
				"          ADDRESS_STATUS as string,",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerAddress",
				"source(output(",
				"          CUSTOMER_EMAIL_ID as integer,",
				"          CUSTOMER_EMAIL as string,",
				"          CUSTOMER_EMAIL_TYPE as string,",
				"          CUSTOMER_EMAIL_STATUS as string,",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerEmail",
				"source(output(",
				"          CUSTOMER_PHONE_NUMBER_ID as integer,",
				"          CUSTOMER_PHONE_NUMBER as string,",
				"          CUSTOMER_PHONE_NUMBER_TYPE as string,",
				"          CUSTOMER_PHONE_NUMBER_STATUS as string,",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerPhone",
				"source(output(",
				"          HUT_LOVERS_ID as integer,",
				"          JOINING_DATE as date,",
				"          IS_ACTIVE as string,",
				"          CUSTOMER_ID as integer,",
				"          MEMBER_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hutlover",
				"filter4 window(over(CUSTOMER_ID),",
				"     desc(CUSTOMER_PHONE_NUMBER_TYPE, true),",
				"     secondary_phone_type = lead(CUSTOMER_PHONE_NUMBER_TYPE),",
				"          secondary_phone = lead(CUSTOMER_PHONE_NUMBER),",
				"          rnk = rowNumber(),",
				"     partitionBy('hash', 1)) ~> window1",
				"window1 filter(rnk==1) ~> filter1",
				"filter3 window(over(CUSTOMER_ID),",
				"     asc(CUSTOMER_EMAIL_TYPE, true),",
				"     secondaryEmail_type = lead(CUSTOMER_EMAIL_TYPE),",
				"          second_email = lead(CUSTOMER_EMAIL),",
				"          rnk = rowNumber()) ~> window2",
				"window2 filter(rnk == 1) ~> filter2",
				"customerEmail filter(CUSTOMER_EMAIL_STATUS== 'Active') ~> filter3",
				"customerPhone filter(CUSTOMER_PHONE_NUMBER_STATUS =='Active') ~> filter4",
				"customerAddress filter(ADDRESS_STATUS == 'Active') ~> filter5",
				"filter5 window(over(CUSTOMER_ID),",
				"     asc(ADDRESS_TYPE, true),",
				"     O_Address_lane1 = lead(ADDRESS_LINE1),",
				"          O_Address_Lane_2 = lead(ADDRESS_LINE2),",
				"          O_City_Name = lead(CITY_NAME),",
				"          O_State_Name = lead(STATE_NAME),",
				"          O_Country_Name = lead(COUNTRY_NAME),",
				"          O_Zip_Code = lead(ZIP_CODE),",
				"          O_Gate_Code = lead(GATE_CODE),",
				"          address_rnk = rowNumber()) ~> window3",
				"filter6 derive(O_Address_lane1 = case(ADDRESS_TYPE =='Office',ADDRESS_LINE1,O_Address_lane1),",
				"          O_Address_Lane_2 = case(ADDRESS_TYPE =='Office',ADDRESS_LINE2,O_Address_Lane_2),",
				"          O_City_Name = case(ADDRESS_TYPE =='Office',CITY_NAME,O_City_Name),",
				"          O_State_Name = case(ADDRESS_TYPE =='Office',STATE_NAME,O_State_Name),",
				"          O_Country_Name = case(ADDRESS_TYPE =='Office',COUNTRY_NAME,O_Country_Name),",
				"          O_Zip_Code = case(ADDRESS_TYPE =='Office',ZIP_CODE,O_Zip_Code),",
				"          O_Gate_Code = case(ADDRESS_TYPE =='Office',GATE_CODE,O_Gate_Code),",
				"          Address_Lane1 = case(ADDRESS_TYPE =='Office','null',ADDRESS_LINE1),",
				"          Address_Lane_2 = case(ADDRESS_TYPE =='Office','null',ADDRESS_LINE2),",
				"          City_Name = case(ADDRESS_TYPE =='Office','null',CITY_NAME),",
				"          State_Name = case(ADDRESS_TYPE =='Office','null',STATE_NAME),",
				"          Country_Name = case(ADDRESS_TYPE =='Office','null',COUNTRY_NAME),",
				"          Zip_Code = case(ADDRESS_TYPE =='Office',0,ZIP_CODE),",
				"          Gate_Code = case(ADDRESS_TYPE =='Office',0),",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"window3 filter(address_rnk==1) ~> filter6",
				"customers, derivedColumn1 join(customers@CUSTOMER_ID == customerAddress@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, filter2 join(customers@CUSTOMER_ID == customerEmail@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, filter1 join(customers@CUSTOMER_ID == customerPhone@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join3",
				"join3, hutlover join(customers@CUSTOMER_ID == hutlover@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join4",
				"select1 keyGenerate(output(CUSTOMER_DIM_KEY as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"join4 select(mapColumn(",
				"          CUSTOMER_ID = customers@CUSTOMER_ID,",
				"          CUSTOMER_FIRST_NAME,",
				"          CUSTOMER_LAST_NAME,",
				"          IS_LOYAL = IS_LOYAL_MEMBER,",
				"          Primary_EMAIL = CUSTOMER_EMAIL,",
				"          second_email,",
				"          Primary_PHONE_NUMBER = CUSTOMER_PHONE_NUMBER,",
				"          secondary_phone_number = secondary_phone,",
				"          R_Address_Lane1 = Address_Lane1,",
				"          R_Address_Lane_2 = Address_Lane_2,",
				"          R_City_Name = derivedColumn1@City_Name,",
				"          R_State_Name = derivedColumn1@State_Name,",
				"          R_Country_Name = derivedColumn1@Country_Name,",
				"          R_Zip_Code = derivedColumn1@Zip_Code,",
				"          R_Gate_Code = derivedColumn1@Gate_Code,",
				"          O_Address_lane1,",
				"          O_Address_Lane_2,",
				"          O_City_Name,",
				"          O_State_Name,",
				"          O_Country_Name,",
				"          O_Zip_Code,",
				"          O_Gate_Code,",
				"          JOINING_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 derive(STG_CREATE_DATE = currentDate()) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          CUSTOMER_DIM_KEY,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_FIRST_NAME,",
				"          CUSTOMER_LAST_NAME,",
				"          IS_LOYAL,",
				"          Primary_EMAIL,",
				"          second_email,",
				"          Primary_PHONE_NUMBER,",
				"          secondary_phone_number,",
				"          R_Address_Lane1,",
				"          R_Address_Lane_2,",
				"          R_City_Name,",
				"          R_State_Name,",
				"          R_Country_Name,",
				"          R_Zip_Code,",
				"          R_Gate_Code,",
				"          O_Address_lane1,",
				"          O_Address_Lane_2,",
				"          O_City_Name,",
				"          O_State_Name,",
				"          O_Country_Name,",
				"          O_Zip_Code,",
				"          O_Gate_Code,",
				"          JOINING_DATE,",
				"          STG_CREATE_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}